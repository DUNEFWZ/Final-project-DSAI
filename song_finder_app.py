# -*- coding: utf-8 -*-
"""song_finder_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oMgGZHKWBmfTdsukNKY4dP9WQUMtxdD4

Application
"""

import streamlit as st
import google.generativeai as genai
import re
from song_finder_module import handle_user_query

# Streamlit UI
st.set_page_config(page_title="Mood-Based Song Recommender", page_icon="ðŸŽµ")
st.title("ðŸŽµ Mood-Based Song Recommender Chatbot")
st.markdown("Ketik sesuatu berdasarkan mood kamu, dan kami akan rekomendasikan lagu!")

# API Key input
GOOGLE_API_KEY = st.text_input("Masukkan API Key Gemini kamu:", type="password")
if not GOOGLE_API_KEY:
    st.warning("Silakan masukkan API key untuk mulai.")
    st.stop()

genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel(model_name="gemini-1.5-flash-latest")

# Initialize chat history
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Input box
if prompt := st.chat_input("Mood lagu hari ini???"):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        response = handle_user_query(prompt, model)
        st.markdown(response)
        st.session_state.messages.append({"role": "assistant", "content": response})
user_input = st.text_input("ðŸ‘¤ User", key="user_input")


# Tampilkan chat history
for speaker, message in st.session_state.chat_history:
    if speaker == "ðŸ‘¤":
        st.markdown(f"**{speaker}**: {message}")
    else:
        st.markdown(f"**{speaker}**:\n\n{message}")
