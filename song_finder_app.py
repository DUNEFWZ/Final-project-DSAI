# -*- coding: utf-8 -*-
"""song_finder_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oMgGZHKWBmfTdsukNKY4dP9WQUMtxdD4

Application
"""

import streamlit as st
import google.generativeai as genai
import re
from song_finder_module import smart_rag_response

# Streamlit UI
st.set_page_config(page_title="Mood-Based Song Recommender", page_icon="ðŸŽµ")
st.title("ðŸŽµ Mood-Based Song Recommender Chatbot")

# API Key input
GOOGLE_API_KEY = st.text_input("Masukkan API Key Gemini kamu:", type="password")
if not GOOGLE_API_KEY:
    st.warning("Silakan masukkan API key untuk mulai.")
    st.stop()

genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel(model_name="gemini-1.5-flash-latest")

# Initialize chat history
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Input box
user_input = st.text_input("ðŸ‘¤Ketik sesuatu berdasarkan mood kamu, dan kami akan rekomendasikan lagu!", key="user_input")

if st.button("Kirim"):
    if user_input.strip() != "":
        try:
            raw_response = smart_rag_response(user_input)
            cleaned_response = clean_cli_text(raw_response)

            # Simpan percakapan
            st.session_state.chat_history.append(("ðŸ‘¤", user_input))
            st.session_state.chat_history.append(("ðŸ¤–", cleaned_response))

        except Exception as e:
            st.error(f"Terjadi error: {e}")

# Tampilkan chat history
for speaker, message in st.session_state.chat_history:
    if speaker == "ðŸ‘¤":
        st.markdown(f"**{speaker}**: {message}")
    else:
        st.markdown(f"**{speaker}**:\n\n{message}")
